<project name="Viewer-Service-Project" default="jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="etc/ant_configuration/service.properties" />
	<property file="etc/ant_configuration/user.properties" />

	<property name="startup" location="etc/startup" />

	<property name="service_agent.path" value="${startup}/agent-service-${service.name}.xml" />
    <property name="user_agent1.path" value="${startup}/agent-user-${las2peer_user1.name}.xml" />
    <property name="user_agent2.path" value="${startup}/agent-user-${las2peer_user2.name}.xml" />
    <property name="user_agent3.path" value="${startup}/agent-user-${las2peer_user3.name}.xml" />
	<property name="passphrases.path" value="${startup}/passphrases.txt" />

	<presetdef name="javac">
		<javac includeantruntime="false" />
	</presetdef>

	<property name="src.main" location="src/main" />
	<property name="src.junit" location="src/test" />

	<property name="tmp" location="tmp" />
	<property name="log" location="log" />
	<property name="service" location="service" />

	<property name="tmp.classes" location="${tmp}/classes" />
	<property name="tmp.junit" location="${tmp}/test" />

	<property name="export" location="export" />
	<property name="export.doc" location="${export}/doc" />
	<property name="export.jars" location="${export}/jars" />
	<property name="junit.report" location="${export}/test_reports" />

	<property name="lib" location="lib" />

	<path id="libraries">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<exclude name="junit-*.jar" />
		</fileset>
	</path>

	<property name="lib.junit" location="${lib}/junit-4.11.jar" />

	<!-- ocd properties -->
	<property name="ocd" location="ocd" />
	<property name="ocd.bin" location="${ocd}/bin" />
	<property name="ocd.derby" location="${ocd}/derby" />
	<property name="ocd.derby.db" location="${ocd.derby}/db" />
	<property name="ocd.eclipselink" location="${ocd}/eclipselink" />
	<!--<property name="ocd.lfr" location="${ocd}/lfr" />-->
	<!--<property name="ocd.log" location="${ocd}/log" />-->
	<property name="ocd.test" location="${ocd}/test" />
	<property name="ocd.test.input" location="${ocd.test}/input" />
	<property name="ocd.test.output" location="${ocd.test}/output" />
	<!--<property name="ocd.tmp" location="${ocd}/tmp" />-->
	<property name="database.server" value="127.0.0.1" />
	<property name="database.port" value="1527" />
	<property name="database.user" value="admin" />
	<property name="database.password" value="adminPw" />
	
	<!-- yGuard obfuscation -->
	<property name="lib.y" location="${lib}/y.jar" />
	<property name="export.jars.y.obf" location="${export.jars}/y.obf-viewer.jar" />
	<property name="lib.ySvg" location="${lib}/ysvg.jar" />
	<property name="export.jars.ySvg.obf" location="${export.jars}/ysvg.obf-viewer.jar" />
	<property name="ocd.yGuard" location="${ocd}/yGuard" />
	<property name="ocd.yGuard.log" location="${ocd.yGuard}/log.xml" />
	<property name="yguard.jar" location="${lib}/yguard.jar" />
	<property name="lib.yGuard" location="${lib}/yguard.jar" />

	<!-- Ivy Installation (Tool to fetch Libraries) -->
	<property name="ivy.install.version" value="2.3.0" />
	<property name="ivy.jar.dir" value="${basedir}/etc/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml" />
	<property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml" />
	<!-- Download Ivy from Web Site so that it can be used without any special Installation -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true" />
	</target>
	<!-- Try to load Ivy here from local Ivy directory -->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>


	<!-- Get Dependencies from our Maven Repository via Ivy -->
	<target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
		<ivy:settings>
			<credentials host="role.dbis.rwth-aachen.de:9911/archiva" realm="Repository internal" />
		</ivy:settings>
		<ivy:retrieve type="jar, bundle" />
	</target>


	<!-- Initialization -->
	<target name="init_ocd" depends="clean_before_build">
		<mkdir dir="${ocd.derby}" />
		<mkdir dir="${ocd.eclipselink}" />
		<!--<mkdir dir="${ocd.lfr}" />-->
		<mkdir dir="${ocd.yGuard}" />
		<!--<mkdir dir="${ocd.log}" />-->
		<mkdir dir="${ocd.test}" />
		<mkdir dir="${ocd.test.input}" />
		<mkdir dir="${ocd.test.output}" />
		<!--<mkdir dir="${ocd.tmp}" />-->
	</target>
	
	<target name="init_general" depends="init_ocd">
		<tstamp />
		<mkdir dir="${tmp}" />
		<mkdir dir="${export}" />
		<mkdir dir="${startup}" />
		<mkdir dir="${log}" />
	</target>

	<target name="init_compile" depends="init_general, get_deps">
		<mkdir dir="${tmp.classes}" />
		<mkdir dir="${tmp.junit}" />
	</target>

	<target name="init_jars" depends="init_general">
		<mkdir dir="${export.jars}" />
	</target>

	<target name="init_doc" depends="init_general">
		<mkdir dir="${export.doc}" />
	</target>


	<!-- Compilation -->
	<target name="compile_main" depends="init_compile">
		<javac srcdir="${src.main}" destdir="${tmp.classes}" classpathref="libraries" source="1.7" target="1.7" debug="on" encoding="UTF-8" />
		<copy todir="${tmp.classes}">
			<fileset dir="${src.main}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="compile_junit" depends="init_compile">
		<javac srcdir="${src.junit}" destdir="${tmp.junit}" classpath="${tmp.classes}:${lib.junit}" classpathref="libraries" source="1.7" target="1.7" debug="on" encoding="UTF-8" />
		<copy todir="${tmp.junit}">
			<fileset dir="${src.junit}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="compile_all" depends="compile_main, compile_junit" />

    <!-- Generate start scripts -->
    <target name="startscripts" description="generate start scripts for Windows and Unix">
        <mkdir dir="${basedir}/bin" />
        <echo file="${basedir}/bin/start_network.sh" append="false">#!/bin/bash

# this script is autogenerated by 'ant startscripts'
# it starts a LAS2peer node providing the service '${service.name}.${service.class}' of this project
# pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh

java -cp "lib/*:service/*" i5.las2peer.tools.L2pNodeLauncher -p 9011 uploadStartupDirectory\(\'etc/startup\'\) startService\(\'${service.name}.${service.class}@${service.version}\'\) startWebConnector interactive

</echo>
        <echo file="${basedir}/bin/start_network.bat" append="false">:: this script is autogenerated by 'ant startscripts'
:: it starts a LAS2peer node providing the service '${service.name}.${service.class}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it

%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;%BASE%/service/*;"

java -cp %CLASSPATH% i5.las2peer.tools.L2pNodeLauncher -w -p 9011 uploadStartupDirectory('etc/startup') startService('${service.name}.${service.class}@${service.version}') startWebConnector interactive
pause

</echo>
    </target>

	<!-- Generate Jars -->
    <target name="jar" depends="compile_main, startscripts" description="--> generate service jars">
		<jar jarfile="${export.jars}/${service.name}-${service.version}.jar">
			<fileset dir="${tmp.classes}" includes="${service.path}/**" />
			<fileset dir="${tmp.classes}" includes="${ocdService.path}/**" />
			<manifest>
				<attribute name="Library-Version" value="${service.version}" />
				<attribute name="Library-SymbolicName" value="${service.name}" />
			</manifest>
		</jar>
		<!-- Add the same Jar to the Service Directory !-->
		<jar jarfile="${service}/${service.name}-${service.version}.jar">
			<fileset dir="${tmp.classes}" includes="${service.path}/**" />
			<fileset dir="${tmp.classes}" includes="${ocdService.path}/**" />
			<manifest>
				<attribute name="Library-Version" value="${service.version}" />
				<attribute name="Library-SymbolicName" value="${service.name}" />
			</manifest>
		</jar>
    	<!-- Add persistence.xml -->
		<jar destfile="${export.jars}/${service.name}-${service.version}.jar" update="true">
			<zipfileset dir="ocd/eclipselink" includes="persistence.xml" prefix="META-INF"/>
		</jar>
	    <jar destfile="${service}/${service.name}-${service.version}.jar" update="true">
	    	<zipfileset dir="ocd/eclipselink" includes="persistence.xml" prefix="META-INF"/>
	    </jar>
	</target>

	<!-- Generate Documentation -->
	<target name="java_doc" depends="init_doc">
		<javadoc destdir="${export.doc}" author="true" version="true" use="true" source="1.7" windowtitle="Service Documentation" failonerror="yes" encoding="utf8" classpath="${tmp.classes}" classpathref="libraries">
			<packageset dir="${src.main}" defaultexcludes="yes">
				<include name="i5/las2peer/**" />
			</packageset>
		</javadoc>
	</target>


	<!-- JUnit Testing -->
	<target name="junit" depends="junit_clean, junit_tests" />

	<target name="init_junit" depends="init_general">
		<mkdir dir="${junit.report}" />
	</target>

	<target name="junit_clean" depends="junit_tests">
		<delete dir="${tmp.junit}" />
	</target>

	<target name="junit_tests" depends="init_junit, compile_all, jar">
		<delete dir="${ocd.derby.db}" />
		<parallel>
			<antcall target="launch_database_server">
			</antcall>
			<sequential>
				<waitfor maxwait="5" maxwaitunit="second">
					<socket server="${database.server}" port="${database.port}" />
				</waitfor>
				<junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
					<classpath>
						<pathelement path="${tmp.classes}" />
						<pathelement path="${tmp.junit}" />
						<pathelement path="${lib.junit}" />
						<path refid="libraries" />
					</classpath>
					<formatter type="plain" />
					<batchtest fork="yes" todir="${junit.report}">
						<fileset dir="${tmp.junit}">
							<include name="**/*Test.class" />
						</fileset>
					</batchtest>
				</junit>
			</sequential>
		</parallel>
		<antcall target="shutdown_database_server">
		</antcall>
	</target>

	<!-- Database Server Control -->
	
	<target name="launch_database_server">
		<echo>Trying to start database server.
May fail if the server is already running or the port is otherwise occupied.</echo>
		<java classname="org.apache.derby.drda.NetworkServerControl" classpathref="libraries" dir="${ocd.derby}" fork="true" spawn="true">
			<arg line="'start' '-h' '${database.server}' '-p' '${database.port}'" />
		</java>
		<waitfor maxwait="5" maxwaitunit="second">
			<socket server="${database.server}" port="${database.port}" />
		</waitfor>
	</target>

	<target name="shutdown_database_server">
			<echo>Trying to shutdown database server.
May fail if the server is not running.</echo>
			<java classname="org.apache.derby.drda.NetworkServerControl" classpathref="libraries">
				<arg line="'shutdown' '-h' '${database.server}' '-p' '${database.port}' '-user' '${database.user}' '-password' '${database.password}'" />
			</java>
			<waitfor maxwait="5" maxwaitunit="second">
				<not>
					<socket server="${database.server}" port="${database.port}" />
				</not>
			</waitfor>
	</target>
	
	<!-- Database Initialization -->
	<target name="setup_database" depends="init_junit, compile_all">
		<delete dir="${ocd.derby.db}" />
		<parallel>
			<antcall target="launch_database_server">
			</antcall>
			<sequential>
				<waitfor maxwait="5" maxwaitunit="second">
					<socket server="${database.server}" port="${database.port}" />
				</waitfor>
				<junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
					<classpath>
						<pathelement path="${tmp.classes}" />
						<pathelement path="${tmp.junit}" />
						<pathelement path="${lib.junit}" />
						<path refid="libraries" />
					</classpath>
					<formatter type="plain" />
					<batchtest fork="yes" todir="${junit.report}">
						<fileset dir="${tmp.junit}">
							<include name="**/DatabaseInitializer.class" />
						</fileset>
					</batchtest>
				</junit>
			</sequential>
		</parallel>
		<antcall target="shutdown_database_server">
		</antcall>
	</target>

	<!-- XML Agent Generation (Builds Jar first so that Generator is available)-->
	<target name="generate_service_agent" depends="jar">
		<echo message="Writing Service Agent xml to ${service_agent.path}" />
		<java classname="i5.las2peer.tools.ServiceAgentGenerator" classpathref="libraries" failonerror="true" fork="true" output="${service_agent.path}">
			<arg line="'${service.name}.${service.class}' '${service.password}'" />
		</java>
	</target>

		<available file="${user_agent1.path}" property="user_agent_exists1"/>
		<available file="${user_agent2.path}" property="user_agent_exists2"/>
		<available file="${user_agent3.path}" property="user_agent_exists3"/>
		
	    <target name="generate_user_agent1" depends="jar" unless="user_agent_exists1">
	        <echo message="Writing User Agent xml to ${user_agent1.path}"/>
	        <java classname="i5.las2peer.tools.UserAgentGenerator" classpathref="libraries"
	            failonerror="true" fork="true" output="${user_agent1.path}">
	            <arg line="'${las2peer_user1.password}' '${las2peer_user1.name}' '${las2peer_user1.email}'"/>
	        </java>
	    </target>
	    <target name="generate_user_agent2" depends="jar" unless="user_agent_exists2">
	        <echo message="Writing User Agent xml to ${user_agent2.path}"/>
	        <java classname="i5.las2peer.tools.UserAgentGenerator" classpathref="libraries"
	            failonerror="true" fork="true" output="${user_agent2.path}">
	            <arg line="'${las2peer_user2.password}' '${las2peer_user2.name}' '${las2peer_user2.email}'"/>
	        </java>
	    </target>
	    <target name="generate_user_agent3" depends="jar" unless="user_agent_exists3">
	        <echo message="Writing User Agent xml to ${user_agent3.path}"/>
	        <java classname="i5.las2peer.tools.UserAgentGenerator" classpathref="libraries"
	            failonerror="true" fork="true" output="${user_agent3.path}">
	            <arg line="'${las2peer_user3.password}' '${las2peer_user3.name}' '${las2peer_user3.email}'"/>
	        </java>
	    </target>

	<target name="generate_configs" depends="generate_service_agent, generate_user_agent1, generate_user_agent2, generate_user_agent3">
		<echo file="${passphrases.path}" append="false">agent-service-${service.name}.xml;${service.password}
agent-user-${las2peer_user1.name}.xml;${las2peer_user1.password}
agent-user-${las2peer_user2.name}.xml;${las2peer_user2.password}
agent-user-${las2peer_user3.name}.xml;${las2peer_user3.password}
</echo>
	</target>

	<target name="database" depends="generate_configs, setup_database" />

	<!-- General Cleanup -->
	<target name="clean_before_build" depends="shutdown_database_server">
		<delete dir="${export}" />
		<delete file="${service}/${service.name}-${service.version}.jar" />
	</target>

	<target name="clean_after_build">
		<delete dir="${tmp}" />
		<delete dir=".las2peer" />
	</target>

	<target name="clean_deps">
		<delete dir="${lib}" />
	</target>

	<target name="clean_all" depends="clean_after_build, clean_before_build, clean_deps">
		<delete dir="${log}" />
	</target>

	<target name="all" depends="clean_before_build, generate_configs, junit, java_doc, clean_after_build" />
	
	 <!-- Obfuscates the yFiles part of the application (i.e., y.jar) and adjusts -->  
	    <!-- the non-yFiles part given by the application's Jar file accordingly. -->  
	    <target name="obfuscate" depends="jar">  
	      <!-- yGuard Ant task. -->  
	      <taskdef name="yguard"   
	               classname="com.yworks.yguard.YGuardTask"   
	               classpath="${lib.yGuard}"/>  
	      <!-- Integrated obfuscation and name adjustment... -->  
	      <yguard>  
	        <!-- Obfuscate the yFiles Jar. -->  
	        <inoutpair in="${lib.y}" out="${export.jars.y.obf}"/>  
	      	<inoutpair in="${lib.ySvg}" out="${export.jars.ySvg.obf}"/> 
	        <!-- While obfuscating, adjust the names of yFiles features in the -->  
	        <!-- application's Jar file. -->  
	        <inoutpair in="${export.jars}/${service.name}-${service.version}.jar" out="${export.jars}/${service.name}-${service.version}.obf.jar"/>  
	        <!-- ...using the yGuard 'rename' task. -->  
	        <rename logfile="${ocd.yGuard.log}" replaceClassNameStrings="true">
	          <property name="obfuscation-prefix" value="yguard"/>
	          <keep>
	            <class classes="private" methods="private" fields="private">  
	              <patternset>
	              	<!-- define classes/methods/fields not to be renamed -->
	                <include name="i5.**"/>
	              	<!-- exlude custom classes extending/implementing yFiles classes -->
	              	<exclude name="i5.las2peer.services.ocd.graphs.CustomGraph"/>
	              	<exclude name="i5.las2peer.services.ocd.graphs.CustomGraphListener"/>
	              </patternset>
	            </class>
	          </keep>
	        </rename>
	      	
	      </yguard>  
	    </target>

</project>
